{% comment %}
  Customer Password Reset Template
  Provides secure password reset functionality with validation
{% endcomment %}

<div class="customer-auth customer-auth--reset" x-data="passwordReset()">
  <div class="container">
    <div class="customer-auth__container">
      <!-- Page Header -->
      <div class="customer-auth__header">
        <h1 class="customer-auth__title">Reset Your Password</h1>
        <p class="customer-auth__subtitle">
          {% if reset_password_token %}
            Create a new secure password for your account
          {% else %}
            Enter your email address and we'll send you a link to reset your password
          {% endif %}
        </p>
      </div>

      <!-- Password Reset Form -->
      <div class="customer-auth__form-container">
        {% if reset_password_token %}
          <!-- New Password Form -->
          {% form 'reset_customer_password', class: 'customer-form', novalidate: 'novalidate' %}
            {% if form.errors %}
              <div class="form-errors" role="alert" aria-live="polite">
                <h2 class="form-errors__title">{{ 'customer.reset_password.error' | t }}</h2>
                <ul class="form-errors__list">
                  {% for error in form.errors %}
                    <li class="form-errors__item">{{ error | first | capitalize }} {{ error | last }}</li>
                  {% endfor %}
                </ul>
              </div>
            {% endif %}

            <input type="hidden" name="token" value="{{ reset_password_token }}">

            <div class="form-field">
              <label for="customer-password" class="form-label">
                {{ 'customer.reset_password.password' | t }}
                <span class="form-required" aria-label="required">*</span>
              </label>
              <div class="password-field">
                <input
                  :type="showPassword ? 'text' : 'password'"
                  id="customer-password"
                  name="customer[password]"
                  class="form-input"
                  required
                  autocomplete="new-password"
                  aria-describedby="password-error password-help"
                  x-model="password"
                  @input="validatePassword()"
                >
                <button
                  type="button"
                  class="password-toggle"
                  @click="showPassword = !showPassword"
                  :aria-label="showPassword ? 'Hide password' : 'Show password'"
                >
                  {% render 'icon', icon: 'eye' %}
                </button>
              </div>
              
              <!-- Password Strength Indicator -->
              <div class="password-strength" x-show="password">
                <div class="password-strength__bar">
                  <div 
                    class="password-strength__fill"
                    :class="`password-strength__fill--${passwordStrength.level}`"
                    :style="`width: ${passwordStrength.percentage}%`"
                  ></div>
                </div>
                <div class="password-strength__text" x-text="passwordStrength.text"></div>
              </div>

              <div id="password-help" class="form-help">
                Password must be at least 8 characters and include uppercase, lowercase, and numbers
              </div>
              <div id="password-error" class="form-error" role="alert" x-show="passwordError" x-text="passwordError"></div>
            </div>

            <div class="form-field">
              <label for="customer-password-confirmation" class="form-label">
                {{ 'customer.reset_password.password_confirm' | t }}
                <span class="form-required" aria-label="required">*</span>
              </label>
              <div class="password-field">
                <input
                  :type="showConfirmPassword ? 'text' : 'password'"
                  id="customer-password-confirmation"
                  name="customer[password_confirmation]"
                  class="form-input"
                  required
                  autocomplete="new-password"
                  aria-describedby="password-confirm-error"
                  x-model="passwordConfirm"
                  @input="validatePasswordConfirm()"
                >
                <button
                  type="button"
                  class="password-toggle"
                  @click="showConfirmPassword = !showConfirmPassword"
                  :aria-label="showConfirmPassword ? 'Hide password' : 'Show password'"
                >
                  {% render 'icon', icon: 'eye' %}
                </button>
              </div>
              <div id="password-confirm-error" class="form-error" role="alert" x-show="passwordConfirmError" x-text="passwordConfirmError"></div>
            </div>

            <!-- Security Tips -->
            <div class="security-tips">
              <h3 class="security-tips__title">Password Security Tips</h3>
              <ul class="security-tips__list">
                <li class="security-tips__item" :class="{ 'security-tips__item--valid': passwordChecks.length }">
                  <span class="security-tips__icon">
                    <template x-if="passwordChecks.length">
                      {% render 'icon', icon: 'check' %}
                    </template>
                    <template x-if="!passwordChecks.length">
                      {% render 'icon', icon: 'close' %}
                    </template>
                  </span>
                  At least 8 characters long
                </li>
                <li class="security-tips__item" :class="{ 'security-tips__item--valid': passwordChecks.uppercase }">
                  <span class="security-tips__icon">
                    <template x-if="passwordChecks.uppercase">
                      {% render 'icon', icon: 'check' %}
                    </template>
                    <template x-if="!passwordChecks.uppercase">
                      {% render 'icon', icon: 'close' %}
                    </template>
                  </span>
                  Contains uppercase letters
                </li>
                <li class="security-tips__item" :class="{ 'security-tips__item--valid': passwordChecks.lowercase }">
                  <span class="security-tips__icon">
                    <template x-if="passwordChecks.lowercase">
                      {% render 'icon', icon: 'check' %}
                    </template>
                    <template x-if="!passwordChecks.lowercase">
                      {% render 'icon', icon: 'close' %}
                    </template>
                  </span>
                  Contains lowercase letters
                </li>
                <li class="security-tips__item" :class="{ 'security-tips__item--valid': passwordChecks.numbers }">
                  <span class="security-tips__icon">
                    <template x-if="passwordChecks.numbers">
                      {% render 'icon', icon: 'check' %}
                    </template>
                    <template x-if="!passwordChecks.numbers">
                      {% render 'icon', icon: 'close' %}
                    </template>
                  </span>
                  Contains numbers
                </li>
                <li class="security-tips__item" :class="{ 'security-tips__item--valid': passwordChecks.match }">
                  <span class="security-tips__icon">
                    <template x-if="passwordChecks.match">
                      {% render 'icon', icon: 'check' %}
                    </template>
                    <template x-if="!passwordChecks.match">
                      {% render 'icon', icon: 'close' %}
                    </template>
                  </span>
                  Passwords match
                </li>
              </ul>
            </div>

            <div class="form-actions">
              <button
                type="submit"
                class="btn btn--primary btn--full-width"
                :disabled="loading || !isFormValid"
                x-text="loading ? 'Resetting Password...' : 'Reset Password'"
              ></button>
            </div>
          {% endform %}
        {% else %}
          <!-- Request Reset Form -->
          {% form 'recover_customer_password', class: 'customer-form', novalidate: 'novalidate' %}
            {% if form.posted_successfully? %}
              <div class="form-success" role="alert" aria-live="polite">
                <div class="form-success__icon">
                  {% render 'icon', icon: 'check-circle' %}
                </div>
                <div class="form-success__content">
                  <h2 class="form-success__title">{{ 'customer.recover_password.success' | t }}</h2>
                  <p class="form-success__message">
                    We've sent a password reset link to your email address. Please check your inbox and follow the instructions.
                  </p>
                </div>
              </div>
            {% endif %}

            {% if form.errors %}
              <div class="form-errors" role="alert" aria-live="polite">
                <h2 class="form-errors__title">{{ 'customer.recover_password.error' | t }}</h2>
                <ul class="form-errors__list">
                  {% for error in form.errors %}
                    <li class="form-errors__item">{{ error | first | capitalize }} {{ error | last }}</li>
                  {% endfor %}
                </ul>
              </div>
            {% endif %}

            {% unless form.posted_successfully? %}
              <div class="form-field">
                <label for="recover-email" class="form-label">
                  {{ 'customer.recover_password.email' | t }}
                  <span class="form-required" aria-label="required">*</span>
                </label>
                <input
                  type="email"
                  id="recover-email"
                  name="email"
                  class="form-input"
                  value="{{ form.email }}"
                  required
                  autocomplete="email"
                  autocapitalize="off"
                  autocorrect="off"
                  aria-describedby="email-error email-help"
                  x-model="email"
                  @blur="validateEmail()"
                >
                <div id="email-help" class="form-help">
                  Enter the email address associated with your account
                </div>
                <div id="email-error" class="form-error" role="alert" x-show="emailError" x-text="emailError"></div>
              </div>

              <div class="form-actions">
                <button
                  type="submit"
                  class="btn btn--primary btn--full-width"
                  :disabled="loading || !email"
                  x-text="loading ? 'Sending Reset Link...' : 'Send Reset Link'"
                ></button>
              </div>
            {% endunless %}
          {% endform %}
        {% endif %}
      </div>

      <!-- Back to Login -->
      <div class="customer-auth__footer">
        <p class="customer-auth__login-prompt">
          {{ 'customer.reset_password.back_to_login' | t }}
          <a href="{{ routes.account_login_url }}" class="customer-auth__login-link">
            {{ 'customer.login.title' | t }}
          </a>
        </p>
      </div>

      <!-- Security Notice -->
      {% unless reset_password_token %}
        <div class="security-notice">
          <div class="security-notice__icon">
            {% render 'icon', icon: 'shield' %}
          </div>
          <div class="security-notice__content">
            <h3 class="security-notice__title">Security Notice</h3>
            <p class="security-notice__text">
              For your security, password reset links expire after 24 hours. 
              If you don't receive an email within a few minutes, please check your spam folder.
            </p>
          </div>
        </div>
      {% endunless %}
    </div>
  </div>
</div>

<script>
  function passwordReset() {
    return {
      email: '{{ form.email | escape }}',
      password: '',
      passwordConfirm: '',
      showPassword: false,
      showConfirmPassword: false,
      loading: false,
      emailError: '',
      passwordError: '',
      passwordConfirmError: '',

      get passwordChecks() {
        return {
          length: this.password.length >= 8,
          uppercase: /[A-Z]/.test(this.password),
          lowercase: /[a-z]/.test(this.password),
          numbers: /\d/.test(this.password),
          match: this.password && this.passwordConfirm && this.password === this.passwordConfirm
        };
      },

      get passwordStrength() {
        if (!this.password) return { level: 'none', percentage: 0, text: '' };
        
        let score = 0;
        let feedback = [];
        
        // Length check
        if (this.passwordChecks.length) score += 25;
        else feedback.push('at least 8 characters');
        
        // Uppercase check
        if (this.passwordChecks.uppercase) score += 25;
        else feedback.push('uppercase letter');
        
        // Lowercase check
        if (this.passwordChecks.lowercase) score += 25;
        else feedback.push('lowercase letter');
        
        // Number check
        if (this.passwordChecks.numbers) score += 25;
        else feedback.push('number');
        
        let level, text;
        if (score < 50) {
          level = 'weak';
          text = `Weak - Add ${feedback.join(', ')}`;
        } else if (score < 75) {
          level = 'medium';
          text = `Good - Add ${feedback.join(', ')}`;
        } else if (score < 100) {
          level = 'strong';
          text = `Strong - Add ${feedback.join(', ')}`;
        } else {
          level = 'excellent';
          text = 'Excellent password strength';
        }
        
        return { level, percentage: score, text };
      },

      get isFormValid() {
        {% if reset_password_token %}
          return this.password && 
                 this.passwordConfirm && 
                 !this.passwordError && 
                 !this.passwordConfirmError &&
                 this.passwordChecks.length &&
                 this.passwordChecks.uppercase &&
                 this.passwordChecks.lowercase &&
                 this.passwordChecks.numbers &&
                 this.passwordChecks.match;
        {% else %}
          return this.email && !this.emailError;
        {% endif %}
      },

      validateEmail() {
        const emailRegex = /^[^\s@]+@[^\s@]+\.[^\s@]+$/;
        
        if (!this.email) {
          this.emailError = 'Email is required';
        } else if (!emailRegex.test(this.email)) {
          this.emailError = 'Please enter a valid email address';
        } else {
          this.emailError = '';
        }
      },

      validatePassword() {
        if (!this.password) {
          this.passwordError = 'Password is required';
        } else if (!this.passwordChecks.length) {
          this.passwordError = 'Password must be at least 8 characters';
        } else if (!this.passwordChecks.uppercase || !this.passwordChecks.lowercase || !this.passwordChecks.numbers) {
          this.passwordError = 'Password must include uppercase, lowercase, and numbers';
        } else {
          this.passwordError = '';
        }
        
        // Re-validate confirmation if it exists
        if (this.passwordConfirm) {
          this.validatePasswordConfirm();
        }
      },

      validatePasswordConfirm() {
        if (!this.passwordConfirm) {
          this.passwordConfirmError = 'Please confirm your password';
        } else if (this.password !== this.passwordConfirm) {
          this.passwordConfirmError = 'Passwords do not match';
        } else {
          this.passwordConfirmError = '';
        }
      },

      init() {
        // Focus first input on load
        this.$nextTick(() => {
          {% if reset_password_token %}
            document.getElementById('customer-password').focus();
          {% else %}
            document.getElementById('recover-email').focus();
          {% endif %}
        });

        // Track analytics
        if (window.KalaAabharanam?.Analytics) {
          const pageTitle = {% if reset_password_token %}'Password Reset'{% else %}'Password Recovery'{% endif %};
          window.KalaAabharanam.Analytics.trackPageView(pageTitle, window.location.href);
        }
      }
    }
  }
</script>

{% schema %}
{
  "name": "Customer Password Reset",
  "settings": [
    {
      "type": "header",
      "content": "Password Reset Settings"
    },
    {
      "type": "checkbox",
      "id": "show_security_tips",
      "label": "Show password security tips",
      "default": true
    },
    {
      "type": "checkbox",
      "id": "show_security_notice",
      "label": "Show security notice",
      "default": true
    }
  ]
}
{% endschema %}